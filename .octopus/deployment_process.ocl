step "generate-suffix" {
    name = "Generate suffix"

    action {
        action_type = "Octopus.TerraformApply"
        properties = {
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.GoogleCloud.ImpersonateServiceAccount = "False"
            Octopus.Action.GoogleCloud.UseVMServiceAccount = "True"
            Octopus.Action.Script.ScriptSource = "GitRepository"
            Octopus.Action.Terraform.AllowPluginDownloads = "True"
            Octopus.Action.Terraform.AzureAccount = "False"
            Octopus.Action.Terraform.GoogleCloudAccount = "False"
            Octopus.Action.Terraform.ManagedAccount = "None"
            Octopus.Action.Terraform.PlanJsonOutput = "False"
            Octopus.Action.Terraform.RunAutomaticFileSubstitution = "True"
            Octopus.Action.Terraform.TemplateDirectory = "terraform/suffix"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopuslabs/terraform-workertools:1.5.2"
        }
    }
}

step "create-cluster-with-rancher" {
    name = "Create cluster with Rancher"

    action {
        action_type = "Octopus.TerraformApply"
        properties = {
            Octopus.Action.AzureAccount.Variable = "Project.Azure.Account"
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.GoogleCloud.ImpersonateServiceAccount = "False"
            Octopus.Action.GoogleCloud.UseVMServiceAccount = "True"
            Octopus.Action.Script.ScriptSource = "GitRepository"
            Octopus.Action.Terraform.AllowPluginDownloads = "True"
            Octopus.Action.Terraform.AzureAccount = "True"
            Octopus.Action.Terraform.GoogleCloudAccount = "False"
            Octopus.Action.Terraform.ManagedAccount = "None"
            Octopus.Action.Terraform.PlanJsonOutput = "False"
            Octopus.Action.Terraform.RunAutomaticFileSubstitution = "True"
            Octopus.Action.Terraform.TemplateDirectory = "terraform/cluster"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopuslabs/terraform-workertools:1.5.2"
        }
    }
}

step "register-cluster-with-octopus" {
    name = "Register cluster with Octopus"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Script.ScriptFileName = "scripts/register-cluster-with-octopus.ps1"
            Octopus.Action.Script.ScriptSource = "GitRepository"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "include-new-cluster" {
    name = "Include new cluster"
    properties = {
        Octopus.Action.TargetRoles = "cm-candidate"
    }

    action {
        action_type = "Octopus.HealthCheck"
        properties = {
            Octopus.Action.HealthCheck.ErrorHandling = "TreatExceptionsAsErrors"
            Octopus.Action.HealthCheck.IncludeMachinesInDeployment = "IncludeCheckedMachines"
            Octopus.Action.HealthCheck.Type = "FullHealthCheck"
            Octopus.Action.RunOnServer = "false"
        }
    }
}

step "install-nginx-aks" {
    name = "Install nginx (AKS)"
    properties = {
        Octopus.Action.TargetRoles = "cm-candidate"
    }

    action {
        action_type = "Octopus.HelmChartUpgrade"
        properties = {
            Octopus.Action.Helm.AdditionalArgs = "--create-namespace"
            Octopus.Action.Helm.ClientVersion = "V3"
            Octopus.Action.Helm.Namespace = "ingress-nginx"
            Octopus.Action.Helm.ReleaseName = "ingress-nginx"
            Octopus.Action.Helm.ResetValues = "True"
            Octopus.Action.Helm.YamlValues = <<-EOT
                controller:
                  service:
                    type: LoadBalancer
                    annotations: {
                      service.beta.kubernetes.io/azure-load-balancer-health-probe-request-path: /healthz
                    }
                    externalTrafficPolicy: Local
                  extraArgs:
                    update-status: "true"
                EOT
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "ingress-nginx"
            Octopus.Action.Package.PackageId = "ingress-nginx"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopusdeploy/worker-tools:5.1.0-ubuntu.22.04"
        }

        packages {
            acquisition_location = "Server"
            feed = "ingress-nginx"
            package_id = "ingress-nginx"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "wait-for-nginx-rollout" {
    name = "Wait for nginx rollout"
    properties = {
        Octopus.Action.TargetRoles = "cm-candidate"
    }

    action {
        action_type = "Octopus.KubernetesRunScript"
        properties = {
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Script.ScriptFileName = "scripts/wait-for-nginx-rollout.sh"
            Octopus.Action.Script.ScriptSource = "GitRepository"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopuslabs/k8s-workertools:latest"
        }
    }
}

step "get-external-ip" {
    name = "Get external IP"
    properties = {
        Octopus.Action.TargetRoles = "cm-candidate"
    }

    action {
        action_type = "Octopus.KubernetesRunScript"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                kubectl get service ingress-nginx-controller --namespace=ingress-nginx
                
                ip=$(kubectl get service ingress-nginx-controller --namespace=ingress-nginx -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
                echo "ip=$ip"
                
                while [ -z "$ip" ]
                do
                  sleep 5
                  ip=$(kubectl get service ingress-nginx-controller --namespace=ingress-nginx -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
                  echo "ip=$ip"
                done
                
                set_octopusvariable "IP" $ip
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopusdeploy/worker-tools:5.1.0-ubuntu.22.04"
        }
    }
}

step "create-dns-record" {
    name = "Create DNS record"

    action {
        action_type = "Octopus.TerraformApply"
        properties = {
            Octopus.Action.AzureAccount.Variable = "Project.Azure.Account"
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.GoogleCloud.ImpersonateServiceAccount = "False"
            Octopus.Action.GoogleCloud.UseVMServiceAccount = "True"
            Octopus.Action.Script.ScriptSource = "GitRepository"
            Octopus.Action.Terraform.AllowPluginDownloads = "True"
            Octopus.Action.Terraform.AzureAccount = "True"
            Octopus.Action.Terraform.GoogleCloudAccount = "False"
            Octopus.Action.Terraform.ManagedAccount = "None"
            Octopus.Action.Terraform.PlanJsonOutput = "False"
            Octopus.Action.Terraform.RunAutomaticFileSubstitution = "True"
            Octopus.Action.Terraform.TemplateDirectory = "terraform/dns"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "#{Platform.WorkerImage.Terraform}"
        }
    }
}

step "install-cert-manager-crds" {
    name = "Install cert manager crds"
    properties = {
        Octopus.Action.TargetRoles = "cm-candidate"
    }

    action {
        action_type = "Octopus.KubernetesRunScript"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.12.2/cert-manager.crds.yaml
                
                # Add the Jetstack Helm repository
                helm repo add jetstack https://charts.jetstack.io
                
                # Update your local Helm chart repository cache
                helm repo update
                
                # Install the cert-manager Helm chart
                helm install cert-manager jetstack/cert-manager \
                  --namespace cert-manager \
                  --create-namespace \
                  --version v1.12.0
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopusdeploy/worker-tools:5.1.0-ubuntu.22.04"
        }
    }
}

step "create-an-issuer" {
    name = "Create an issuer"
    properties = {
        Octopus.Action.TargetRoles = "cm-candidate"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        properties = {
            Octopus.Action.GitRepository.FilePathFilters = "yaml/issuer.yaml"
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Kubernetes.DeploymentTimeout = "6000"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "False"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "False"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "False"
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: cert-manager.io/v1
                kind: ClusterIssuer
                metadata:
                  name: letsencrypt
                spec:
                  acme:
                    server: https://acme-v02.api.letsencrypt.org/directory
                    email: advice@octopus.com
                    privateKeySecretRef:
                      name: letsencrypt
                    solvers:
                      - http01:
                          ingress:
                            class: nginx
                EOT
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "yaml/issuer.yaml"
            Octopus.Action.KubernetesContainers.DeploymentWait = "NoWait"
            Octopus.Action.Script.ScriptSource = "GitRepository"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopusdeploy/worker-tools:5.1.0-ubuntu.22.04"
        }
    }
}

step "manual-intervention-required" {
    name = "Approve the cluster swap"

    action "approve-the-cluster-swap" {
        action_type = "Octopus.Manual"
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "False"
            Octopus.Action.Manual.Instructions = "Approve this step once the cluster is ready to be the active cluster."
            Octopus.Action.RunOnServer = "false"
        }
    }
}

step "swap-clusters-in-load-balancer" {
    name = "Swap clusters in load balancer"

    action {
        action_type = "Octopus.AzurePowerShell"
        is_disabled = true
        properties = {
            Octopus.Action.Azure.AccountId = "octofx-azure-subscription"
            Octopus.Action.Script.ScriptBody = "Write-Host \"Swapping clusters\""
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopusdeploy/worker-tools:6.2.1-ubuntu.22.04"
        }
    }
}

step "swap-roles-on-clusters" {
    name = "Swap roles on clusters"
    properties = {
        Octopus.Action.TargetRoles = "cm-candidate,cm"
    }

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Script.ScriptFileName = "scripts/swap-cluster-tags.ps1"
            Octopus.Action.Script.ScriptSource = "GitRepository"
        }
        worker_pool = "hosted-ubuntu"
    }
}